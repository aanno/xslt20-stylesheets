version=2.4.3
saxonVersion=9.9.1-5
xmlCalabashVersion=1.1.28-99
resourcesVersion=2.1.1

snapshot=
builtBy=Norman Walsh
baseline=0
print=cssprint
css=resources/css/paged-bw.css
testsrc=*.xml
group=org.docbook
ignoreHead=0
ignorePrism=0

pre_html=
post_html=
pre_print_css=tools/test/ann-to-footnotes.xsl
post_print_css=
pre_print_fo=
post_print_fo=

# for css-print test you need a css-print processor
test_include_css_print=false

# https://docs.gradle.org/current/userguide/build_environment.html
#
# org.gradle.caching=(true,false)
# When set to true, Gradle will reuse task outputs from any previous build, when possible, resulting is much
# faster builds. Learn more about using the build cache.
org.gradle.caching=true
#
# org.gradle.caching.debug=(true,false)
# When set to true, individual input property hashes and the build cache key for each task are logged on the
# console. Learn more about task output caching.
#
# org.gradle.configureondemand=(true,false)
# Enables incubating configuration on demand, where Gradle will attempt to configure only necessary projects.
#
# org.gradle.console=(auto,plain,rich,verbose)
# Customize console output coloring or verbosity. Default depends on how Gradle is invoked. See command-line logging for additional details.
#
# org.gradle.daemon=(true,false)
# When set to true the Gradle Daemon is used to run the build. Default is true.
#
# org.gradle.daemon.idletimeout=(# of idle millis)
# Gradle Daemon will terminate itself after specified number of idle milliseconds. Default is 10800000 (3 hours)
#
# org.gradle.debug=(true,false)
# When set to true, Gradle will run the build with remote debugging enabled, listening on port 5005.
# Note that this is the equivalent of adding -agentlib:jdwp=transport=dt_socket,server=y,suspend=y,address=5005
# to the JVM command line and will suspend the virtual machine until a debugger is attached. Default is false.
#
# org.gradle.java.home=(path to JDK home)
# Specifies the Java home for the Gradle build process. The value can be set to either a jdk or jre location,
# however, depending on what your build does, using a JDK is safer. A reasonable default is derived from
# your environment (JAVA_HOME or the path to java) if the setting is unspecified. This does not affect the
# version of Java used to launch the Gradle client VM (see Environment variables).
#
# org.gradle.jvmargs=(JVM arguments)
# Specifies the JVM arguments used for the Gradle Daemon. The setting is particularly useful for configuring
# JVM memory settings for build performance. This does not affect the JVM settings for the Gradle client VM.
org.gradle.jvmargs=--illegal-access=warn -Dfile.encoding=UTF-8 -Xms1024m -Xmx2048m -Dcom.xmlcalabash.css-processor=com.xmlcalabash.util.print.CssPrince
#
# org.gradle.logging.level=(quiet,warn,lifecycle,info,debug)
# When set to quiet, warn, lifecycle, info, or debug, Gradle will use this log level. The values are not case
# sensitive. The lifecycle level is the default. See Choosing a log level.
#
# org.gradle.parallel=(true,false)
# When configured, Gradle will fork up to org.gradle.workers.max JVMs to execute projects in parallel. To learn
# more about parallel task execution, see the Gradle performance guide.
#
# org.gradle.warning.mode=(all,fail,summary,none)
# When set to all, summary or none, Gradle will use different warning type display. See Command-line logging
# options for details.
#
# org.gradle.workers.max=(max # of worker processes)
# When configured, Gradle will use a maximum of the given number of workers. Default is number of CPU processors.
# See also performance command-line options.
#
# org.gradle.priority=(low,normal)
# Specifies the scheduling priority for the Gradle daemon and all processes launched by it. Default is normal.
# See also performance command-line options.
